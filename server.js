const express = require('express');
const mongoose = require('mongoose');
const bot = require('./bot');

require('dotenv').config();

const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI);

// –ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
const Subscriber = mongoose.model('Subscriber');

// üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
app.get('/admin/subscribers', async (req, res) => {
  const subs = await Subscriber.find();
  res.json(subs);
});

// üìä –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
app.get('/admin/stats', async (req, res) => {
  const count = await Subscriber.countDocuments();
  res.json({ totalSubscribers: count });
});

// üó∫Ô∏è –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (—Ö—Ä–∞–Ω–∏–º –≤ –±–∞–∑–µ)
const Scenario = mongoose.model('Scenario', new mongoose.Schema({
  name: String,
  steps: Array
}));

app.get('/admin/scenarios', async (req, res) => {
  res.json(await Scenario.find());
});

app.post('/admin/scenarios', async (req, res) => {
  const scenario = new Scenario(req.body);
  await scenario.save();
  res.json(scenario);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
bot.launch();
app.listen(3000, () => console.log('–ê–¥–º–∏–Ω–∫–∞: http://localhost:3000'));

