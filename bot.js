require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Subscriber = require('./models/Subscriber');
const Scenario = require('./models/Scenario');
const UserProgress = require('./models/UserProgress');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ .env
const bot = new Telegraf(process.env.BOT_TOKEN);

// -------------------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB --------------------
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

// -------------------- /start --------------------
bot.start(async (ctx) => {
  const { id: userId, username } = ctx.from;
  const chatId = ctx.chat.id;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º username
  await Subscriber.findOneAndUpdate(
    { chatId },           // –∏—â–µ–º –ø–æ chatId
    { userId, chatId, username }, // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    { upsert: true }      // –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
  );

  // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
  await UserProgress.findOneAndUpdate(
    { userId, chatId },   // –∫–ª—é—á –ø–æ–∏—Å–∫–∞ ‚Äî userId + chatId
    { userId, chatId },   // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è upsert
    { upsert: true }
  );

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  const scenarios = await Scenario.find();
  if (scenarios.length === 0) return ctx.reply('–°—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.');

  // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
  const buttons = scenarios.map(s => [Markup.button.callback(s.name, `scenario_${s._id}`)]);
  ctx.reply('üëã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:', Markup.inlineKeyboard(buttons));
});

// -------------------- –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è --------------------
bot.action(/scenario_(.+)/, async (ctx) => {
  const scenarioId = ctx.match[1];
  const scenario = await Scenario.findById(scenarioId);
  if (!scenario) return ctx.reply('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.');

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —à–∞–≥
  await UserProgress.findOneAndUpdate(
    { userId, chatId },
    { currentScenario: scenario._id, currentStep: 0 },
    { upsert: true }
  );

  ctx.reply(`üó∫ –í—ã –Ω–∞—á–∞–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
  ctx.reply(`–®–∞–≥ 1: ${scenario.steps[0]}`);
});

// -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --------------------
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ø—É–ª—è—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
  const progress = await UserProgress.findOne({ userId, chatId }).populate('currentScenario');
  if (!progress || !progress.currentScenario) return;

  const stepIndex = progress.currentStep;
  const steps = progress.currentScenario.steps;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ctx.reply(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: ${ctx.message.text}`);

  const nextStep = stepIndex + 1;
  if (nextStep < steps.length) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    await UserProgress.findOneAndUpdate(
      { userId, chatId },
      { currentStep: nextStep }
    );
    ctx.reply(`–®–∞–≥ ${nextStep + 1}: ${steps[nextStep]}`);
  } else {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    await UserProgress.findOneAndUpdate(
      { userId, chatId },
      { currentScenario: null, currentStep: 0 }
    );
    ctx.reply('üéâ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω!');
  }
});

// -------------------- –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ --------------------
module.exports = bot;

// -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ --------------------
if (process.env.NODE_ENV === 'production') {
  bot.telegram.setWebhook(`${process.env.WEBHOOK_URL}/bot`)
    .then(() => console.log(`ü§ñ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${process.env.WEBHOOK_URL}/bot`))
    .catch(console.error);
}
