require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');

const Subscriber = require('./models/Subscriber');
const Scenario = require('./models/Scenario');
const UserProgress = require('./models/UserProgress');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

// /start ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
bot.start(async (ctx) => {
  const { id, username } = ctx.from;
  await Subscriber.findOneAndUpdate(
    { userId: id },
    { username },
    { upsert: true }
  );

  const scenarios = await Scenario.find();
  if (scenarios.length === 0) {
    return ctx.reply('–°—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.');
  }

  const buttons = scenarios.map(s => [Markup.button.callback(s.name, `scenario_${s._id}`)]);
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:', Markup.inlineKeyboard(buttons));
});

// –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
bot.action(/scenario_(.+)/, async (ctx) => {
  const scenarioId = ctx.match[1];
  const scenario = await Scenario.findById(scenarioId);
  if (!scenario) return ctx.reply('–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await UserProgress.findOneAndUpdate(
    { userId: ctx.from.id },
    { currentScenario: scenario._id, currentStep: 0 },
    { upsert: true }
  );

  ctx.reply(`üó∫ –í—ã –Ω–∞—á–∞–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
  ctx.reply(`–®–∞–≥ 1: ${scenario.steps[0]}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
bot.on('text', async (ctx) => {
  const progress = await UserProgress.findOne({ userId: ctx.from.id }).populate('currentScenario');
  if (!progress || !progress.currentScenario) return;

  const stepIndex = progress.currentStep;
  const steps = progress.currentScenario.steps;

  // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  ctx.reply(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: ${ctx.message.text}`);

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const nextStep = stepIndex + 1;
  if (nextStep < steps.length) {
    await UserProgress.findOneAndUpdate(
      { userId: ctx.from.id },
      { currentStep: nextStep }
    );
    ctx.reply(`–®–∞–≥ ${nextStep + 1}: ${steps[nextStep]}`);
  } else {
    // –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω
    await UserProgress.findOneAndUpdate(
      { userId: ctx.from.id },
      { currentScenario: null, currentStep: 0 }
    );
    ctx.reply('üéâ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω!');
  }
});

module.exports = bot;
